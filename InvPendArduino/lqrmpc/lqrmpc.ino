#include <Thread.h>
#include <ThreadController.h>
#include <RobojaxBTS7960.h>

//Limit Switch Pins
#define limLPin 53
#define limRPin 52

//DC Motor Pins
#define RPWM 3 // define pin 3 for RPWM pin (output)
#define R_EN 4 // define pin 2 for R_EN pin (input)
#define R_IS 5 // define pin 5 for R_IS pin (output)

#define LPWM 6 // define pin 6 for LPWM pin (output)
#define L_EN 7 // define pin 7 for L_EN pin (input)
#define L_IS 8 // define pin 8 for L_IS pin (output)
#define CW 1 //do not change
#define CCW 0 //do not change

//DC Motor Object
RobojaxBTS7960 motor(R_EN, RPWM, R_IS, L_EN, LPWM, L_IS, 1);

//Threads
Thread uState = Thread();
Thread applyControl = Thread();
ThreadController threads = ThreadController();

//Encoder Pins
#define w1 18
#define g1 19
#define w2 20
#define g2 21

//Encoder Signals
long counter1 = 0;
long counter2 = 0;

//System References
float centerPos;
float pendulumDownAngle;
float pendulumUpAngle;

//System State
float x[5];
float startTime;
float lastPosUpdate;
float lastAngUpdate;
int n = 0;

//System Parameters
float r = .021;

//Control Data
const float K1[302] PROGMEM = {-1.0503, -1.0526, -1.0550, -1.0573, -1.0597, -1.0621, -1.0644, -1.0666, -1.0687, -1.0707, -1.0725, -1.0742, -1.0757, -1.0769, -1.0779, -1.0786, -1.0791, -1.0793, -1.0793, -1.0789, -1.0783, -1.0775, -1.0765, -1.0752, -1.0738, -1.0722, -1.0706, -1.0689, -1.0671, -1.0654, -1.0637, -1.0621, -1.0607, -1.0594, -1.0583, -1.0575, -1.0570, -1.0567, -1.0568, -1.0572, -1.0581, -1.0593, -1.0609, -1.0630, -1.0655, -1.0685, -1.0720, -1.0759, -1.0803, -1.0851, -1.0905, -1.0962, -1.1024, -1.1089, -1.1158, -1.1229, -1.1303, -1.1377, -1.1452, -1.1526, -1.1597, -1.1665, -1.1727, -1.1782, -1.1827, -1.1862, -1.1883, -1.1889, -1.1879, -1.1851, -1.1804, -1.1738, -1.1653, -1.1549, -1.1428, -1.1291, -1.1141, -1.0981, -1.0814, -1.0643, -1.0471, -1.0302, -1.0139, -0.9983, -0.9837, -0.9702, -0.9581, -0.9472, -0.9377, -0.9294, -0.9224, -0.9165, -0.9115, -0.9075, -0.9041, -0.9013, -0.8989, -0.8968, -0.8948, -0.8927, -0.8906, -0.8882, -0.8856, -0.8826, -0.8792, -0.8755, -0.8713, -0.8669, -0.8621, -0.8571, -0.8520, -0.8469, -0.8418, -0.8368, -0.8322, -0.8281, -0.8245, -0.8215, -0.8194, -0.8181, -0.8178, -0.8185, -0.8201, -0.8226, -0.8259, -0.8297, -0.8337, -0.8375, -0.8404, -0.8418, -0.8408, -0.8365, -0.8278, -0.8139, -0.7940, -0.7678, -0.7354, -0.6976, -0.6558, -0.6119, -0.5683, -0.5277, -0.4927, -0.4654, -0.4478, -0.4412, -0.4462, -0.4626, -0.4900, -0.5270, -0.5721, -0.6233, -0.6784, -0.7357, -0.7932, -0.8495, -0.9035, -0.9547, -1.0025, -1.0470, -1.0883, -1.1266, -1.1621, -1.1953, -1.2263, -1.2553, -1.2824, -1.3077, -1.3309, -1.3519, -1.3704, -1.3861, -1.3985, -1.4070, -1.4113, -1.4107, -1.4048, -1.3931, -1.3753, -1.3512, -1.3207, -1.2838, -1.2410, -1.1926, -1.1394, -1.0820, -1.0215, -0.9587, -0.8947, -0.8304, -0.7669, -0.7051, -0.6457, -0.5896, -0.5374, -0.4896, -0.4470, -0.4099, -0.3788, -0.3542, -0.3366, -0.3266, -0.3245, -0.3309, -0.3464, -0.3714, -0.4061, -0.4509, -0.5059, -0.5710, -0.6464, -0.7322, -0.8287, -0.9366, -1.0569, -1.1907, -1.3388, -1.5015, -1.6773, -1.8622, -2.0481, -2.2224, -2.3676, -2.4629, -2.4891, -2.4337, -2.2960, -2.0881, -1.8310, -1.5489, -1.2635, -0.9904, -0.7392, -0.5144, -0.3168, -0.1450, 0.0034, 0.1311, 0.2409, 0.3354, 0.4167, 0.4870, 0.5477, 0.6003, 0.6459, 0.6855, 0.7200, 0.7501, 0.7763, 0.7991, 0.8191, 0.8366, 0.8520, 0.8656, 0.8777, 0.8885, 0.8983, 0.9071, 0.9153, 0.9228, 0.9298, 0.9364, 0.9426, 0.9484, 0.9539, 0.9589, 0.9637, 0.9680, 0.9719, 0.9755, 0.9786, 0.9814, 0.9838, 0.9857, 0.9873, 0.9886, 0.9896, 0.9903, 0.9908, 0.9911, 0.9912, 0.9913, 0.9912, 0.9912, 0.9911, 0.9911, 0.9911, 0.9912, 0.9915, 0.9918, 0.9923, 0.9929, 0.9936, 0.9945, 0.9954, 0.9964, 0.9973, 0.9983, 0.9991, 0.9997, 1.0000, 1.0000};
const float K2[302] PROGMEM = {1.8867, 1.8908, 1.8948, 1.8987, 1.9023, 1.9057, 1.9088, 1.9116, 1.9140, 1.9160, 1.9176, 1.9188, 1.9195, 1.9197, 1.9194, 1.9187, 1.9175, 1.9160, 1.9141, 1.9119, 1.9094, 1.9068, 1.9041, 1.9014, 1.8988, 1.8964, 1.8942, 1.8924, 1.8910, 1.8902, 1.8900, 1.8905, 1.8918, 1.8939, 1.8969, 1.9009, 1.9059, 1.9120, 1.9191, 1.9274, 1.9368, 1.9474, 1.9592, 1.9722, 1.9863, 2.0016, 2.0181, 2.0356, 2.0542, 2.0738, 2.0942, 2.1154, 2.1373, 2.1596, 2.1823, 2.2050, 2.2276, 2.2499, 2.2714, 2.2918, 2.3109, 2.3283, 2.3435, 2.3562, 2.3661, 2.3728, 2.3760, 2.3754, 2.3710, 2.3626, 2.3504, 2.3345, 2.3151, 2.2927, 2.2678, 2.2409, 2.2126, 2.1835, 2.1541, 2.1251, 2.0968, 2.0696, 2.0438, 2.0195, 1.9969, 1.9758, 1.9564, 1.9385, 1.9221, 1.9070, 1.8933, 1.8809, 1.8699, 1.8603, 1.8522, 1.8458, 1.8412, 1.8387, 1.8385, 1.8408, 1.8459, 1.8540, 1.8653, 1.8801, 1.8986, 1.9208, 1.9471, 1.9774, 2.0119, 2.0506, 2.0936, 2.1409, 2.1924, 2.2481, 2.3080, 2.3718, 2.4394, 2.5105, 2.5849, 2.6620, 2.7414, 2.8223, 2.9037, 2.9843, 3.0626, 3.1365, 3.2037, 3.2611, 3.3053, 3.3325, 3.3387, 3.3198, 3.2723, 3.1939, 3.0840, 2.9445, 2.7801, 2.5984, 2.4091, 2.2235, 2.0525, 1.9056, 1.7889, 1.7051, 1.6526, 1.6265, 1.6185, 1.6190, 1.6176, 1.6048, 1.5729, 1.5168, 1.4340, 1.3250, 1.1926, 1.0412, 0.8759, 0.7022, 0.5254, 0.3498, 0.1791, 0.0164, -0.1362, -0.2772, -0.4056, -0.5204, -0.6213, -0.7080, -0.7802, -0.8377, -0.8804, -0.9081, -0.9208, -0.9183, -0.9004, -0.8673, -0.8190, -0.7556, -0.6774, -0.5850, -0.4791, -0.3606, -0.2307, -0.0908, 0.0576, 0.2127, 0.3726, 0.5354, 0.6992, 0.8620, 1.0217, 1.1765, 1.3244, 1.4635, 1.5919, 1.7075, 1.8082, 1.8918, 1.9559, 1.9980, 2.0154, 2.0053, 1.9654, 1.8934, 1.7884, 1.6508, 1.4832, 1.2915, 1.0849, 0.8762, 0.6817, 0.5201, 0.4110, 0.3732, 0.4232, 0.5729, 0.8290, 1.1904, 1.6470, 2.1772, 2.7450, 3.2989, 3.7734, 4.0962, 4.2030, 4.0554, 3.6550, 3.0440, 2.2924, 1.4767, 0.6627, -0.1034, -0.7955, -1.4035, -1.9279, -2.3750, -2.7539, -3.0740, -3.3445, -3.5732, -3.7671, -3.9318, -4.0719, -4.1912, -4.2927, -4.3791, -4.4523, -4.5140, -4.5659, -4.6092, -4.6450, -4.6746, -4.6988, -4.7186, -4.7348, -4.7484, -4.7598, -4.7699, -4.7791, -4.7878, -4.7963, -4.8048, -4.8135, -4.8222, -4.8310, -4.8397, -4.8481, -4.8560, -4.8632, -4.8695, -4.8747, -4.8787, -4.8814, -4.8827, -4.8827, -4.8815, -4.8790, -4.8755, -4.8710, -4.8658, -4.8601, -4.8540, -4.8477, -4.8414, -4.8354, -4.8297, -4.8246, -4.8202, -4.8165, -4.8138, -4.8121, -4.8114, -4.8117, -4.8131, -4.8154, -4.8186, -4.8225, -4.8268, -4.8313, -4.8356, -4.8395, -4.8395};
const float K3[302] PROGMEM = {-0.3307, -0.3334, -0.3362, -0.3390, -0.3418, -0.3445, -0.3472, -0.3498, -0.3523, -0.3546, -0.3567, -0.3586, -0.3602, -0.3616, -0.3627, -0.3635, -0.3640, -0.3641, -0.3640, -0.3635, -0.3628, -0.3617, -0.3605, -0.3590, -0.3575, -0.3558, -0.3540, -0.3523, -0.3506, -0.3491, -0.3477, -0.3466, -0.3458, -0.3454, -0.3455, -0.3460, -0.3470, -0.3486, -0.3508, -0.3537, -0.3573, -0.3617, -0.3668, -0.3726, -0.3793, -0.3868, -0.3952, -0.4044, -0.4144, -0.4253, -0.4370, -0.4494, -0.4627, -0.4766, -0.4911, -0.5062, -0.5217, -0.5375, -0.5534, -0.5693, -0.5848, -0.5998, -0.6140, -0.6271, -0.6388, -0.6487, -0.6564, -0.6618, -0.6645, -0.6642, -0.6608, -0.6541, -0.6441, -0.6309, -0.6147, -0.5957, -0.5743, -0.5510, -0.5261, -0.5004, -0.4742, -0.4482, -0.4227, -0.3982, -0.3751, -0.3537, -0.3341, -0.3165, -0.3010, -0.2875, -0.2761, -0.2667, -0.2592, -0.2534, -0.2493, -0.2467, -0.2456, -0.2459, -0.2475, -0.2503, -0.2544, -0.2597, -0.2664, -0.2743, -0.2837, -0.2945, -0.3071, -0.3213, -0.3376, -0.3560, -0.3768, -0.4001, -0.4264, -0.4557, -0.4884, -0.5248, -0.5652, -0.6098, -0.6589, -0.7127, -0.7714, -0.8348, -0.9031, -0.9757, -1.0521, -1.1313, -1.2120, -1.2920, -1.3689, -1.4392, -1.4988, -1.5430, -1.5667, -1.5646, -1.5322, -1.4660, -1.3646, -1.2291, -1.0637, -0.8751, -0.6724, -0.4658, -0.2659, -0.0823, 0.0772, 0.2070, 0.3038, 0.3669, 0.3981, 0.4007, 0.3798, 0.3410, 0.2904, 0.2337, 0.1758, 0.1206, 0.0709, 0.0283, -0.0065, -0.0337, -0.0537, -0.0676, -0.0764, -0.0813, -0.0833, -0.0833, -0.0821, -0.0804, -0.0786, -0.0770, -0.0758, -0.0750, -0.0747, -0.0746, -0.0748, -0.0748, -0.0746, -0.0741, -0.0730, -0.0714, -0.0695, -0.0673, -0.0654, -0.0642, -0.0643, -0.0665, -0.0718, -0.0810, -0.0951, -0.1151, -0.1418, -0.1760, -0.2183, -0.2691, -0.3286, -0.3965, -0.4720, -0.5538, -0.6399, -0.7274, -0.8123, -0.8897, -0.9533, -0.9958, -1.0090, -0.9840, -0.9127, -0.7878, -0.6049, -0.3629, -0.0649, 0.2812, 0.6638, 1.0679, 1.4768, 1.8730, 2.2384, 2.5552, 2.8055, 2.9711, 3.0350, 2.9830, 2.8080, 2.5151, 2.1258, 1.6781, 1.2199, 0.7980, 0.4476, 0.1862, 0.0151, -0.0756, -0.1011, -0.0777, -0.0197, 0.0608, 0.1549, 0.2558, 0.3590, 0.4613, 0.5604, 0.6550, 0.7445, 0.8283, 0.9063, 0.9786, 1.0453, 1.1067, 1.1631, 1.2147, 1.2620, 1.3053, 1.3449, 1.3811, 1.4144, 1.4449, 1.4731, 1.4990, 1.5230, 1.5453, 1.5659, 1.5852, 1.6030, 1.6197, 1.6351, 1.6494, 1.6627, 1.6749, 1.6861, 1.6964, 1.7058, 1.7143, 1.7220, 1.7290, 1.7353, 1.7409, 1.7460, 1.7506, 1.7548, 1.7586, 1.7621, 1.7654, 1.7685, 1.7714, 1.7742, 1.7769, 1.7796, 1.7823, 1.7849, 1.7875, 1.7901, 1.7927, 1.7953, 1.7978, 1.8002, 1.8024, 1.8044, 1.8062, 1.8077, 1.8088, 1.8095, 1.8100};
const float K4[302] PROGMEM = {0.0831, 0.0821, 0.0811, 0.0801, 0.0791, 0.0781, 0.0771, 0.0761, 0.0752, 0.0742, 0.0734, 0.0726, 0.0718, 0.0712, 0.0706, 0.0701, 0.0696, 0.0693, 0.0690, 0.0689, 0.0688, 0.0688, 0.0688, 0.0689, 0.0690, 0.0692, 0.0694, 0.0695, 0.0697, 0.0698, 0.0698, 0.0698, 0.0696, 0.0694, 0.0690, 0.0685, 0.0678, 0.0669, 0.0659, 0.0647, 0.0632, 0.0616, 0.0597, 0.0576, 0.0552, 0.0526, 0.0498, 0.0467, 0.0434, 0.0398, 0.0360, 0.0320, 0.0278, 0.0233, 0.0187, 0.0139, 0.0090, 0.0040, -0.0010, -0.0060, -0.0109, -0.0157, -0.0203, -0.0246, -0.0286, -0.0320, -0.0349, -0.0372, -0.0387, -0.0394, -0.0393, -0.0383, -0.0363, -0.0335, -0.0299, -0.0254, -0.0203, -0.0145, -0.0084, -0.0019, 0.0046, 0.0112, 0.0175, 0.0236, 0.0292, 0.0342, 0.0387, 0.0424, 0.0455, 0.0477, 0.0492, 0.0500, 0.0501, 0.0494, 0.0482, 0.0463, 0.0439, 0.0409, 0.0375, 0.0337, 0.0294, 0.0247, 0.0196, 0.0141, 0.0082, 0.0019, -0.0049, -0.0123, -0.0202, -0.0288, -0.0381, -0.0481, -0.0590, -0.0707, -0.0835, -0.0973, -0.1122, -0.1283, -0.1456, -0.1641, -0.1838, -0.2047, -0.2267, -0.2496, -0.2732, -0.2972, -0.3210, -0.3440, -0.3655, -0.3842, -0.3991, -0.4087, -0.4115, -0.4058, -0.3903, -0.3639, -0.3260, -0.2770, -0.2179, -0.1505, -0.0773, -0.0015, 0.0738, 0.1454, 0.2104, 0.2665, 0.3117, 0.3448, 0.3651, 0.3725, 0.3678, 0.3522, 0.3274, 0.2952, 0.2580, 0.2178, 0.1766, 0.1360, 0.0975, 0.0619, 0.0300, 0.0022, -0.0213, -0.0405, -0.0554, -0.0663, -0.0734, -0.0769, -0.0773, -0.0749, -0.0701, -0.0632, -0.0546, -0.0448, -0.0342, -0.0233, -0.0126, -0.0025, 0.0065, 0.0139, 0.0194, 0.0224, 0.0227, 0.0201, 0.0143, 0.0052, -0.0071, -0.0226, -0.0412, -0.0626, -0.0865, -0.1127, -0.1406, -0.1698, -0.1997, -0.2298, -0.2593, -0.2874, -0.3129, -0.3349, -0.3517, -0.3619, -0.3635, -0.3545, -0.3328, -0.2962, -0.2429, -0.1716, -0.0815, 0.0271, 0.1531, 0.2941, 0.4476, 0.6103, 0.7789, 0.9499, 1.1198, 1.2847, 1.4392, 1.5766, 1.6875, 1.7604, 1.7824, 1.7419, 1.6324, 1.4561, 1.2254, 0.9605, 0.6841, 0.4166, 0.1718, -0.0426, -0.2248, -0.3762, -0.5002, -0.6007, -0.6819, -0.7472, -0.7998, -0.8420, -0.8761, -0.9035, -0.9256, -0.9434, -0.9577, -0.9692, -0.9784, -0.9857, -0.9915, -0.9960, -0.9995, -1.0021, -1.0041, -1.0056, -1.0067, -1.0076, -1.0082, -1.0087, -1.0091, -1.0095, -1.0099, -1.0103, -1.0108, -1.0112, -1.0117, -1.0121, -1.0125, -1.0129, -1.0132, -1.0134, -1.0135, -1.0135, -1.0134, -1.0132, -1.0129, -1.0125, -1.0121, -1.0115, -1.0109, -1.0103, -1.0097, -1.0090, -1.0084, -1.0079, -1.0073, -1.0069, -1.0065, -1.0062, -1.0060, -1.0059, -1.0059, -1.0060, -1.0062, -1.0065, -1.0069, -1.0073, -1.0077, -1.0081, -1.0085, -1.0088, -1.0090, -1.0090};
const float uk[302] = {0.0119, 0.0373, 0.0627, 0.0880, 0.1131, 0.1379, 0.1625, 0.1867, 0.2105, 0.2338, 0.2565, 0.2787, 0.3001, 0.3208, 0.3408, 0.3599, 0.3780, 0.3953, 0.4115, 0.4267, 0.4408, 0.4538, 0.4658, 0.4766, 0.4862, 0.4947, 0.5021, 0.5083, 0.5134, 0.5174, 0.5202, 0.5219, 0.5225, 0.5221, 0.5205, 0.5179, 0.5141, 0.5093, 0.5035, 0.4965, 0.4885, 0.4793, 0.4691, 0.4578, 0.4454, 0.4319, 0.4173, 0.4016, 0.3849, 0.3670, 0.3481, 0.3281, 0.3070, 0.2850, 0.2620, 0.2381, 0.2133, 0.1877, 0.1614, 0.1344, 0.1067, 0.0786, 0.0501, 0.0213, -0.0076, -0.0366, -0.0655, -0.0941, -0.1223, -0.1500, -0.1770, -0.2032, -0.2285, -0.2528, -0.2759, -0.2978, -0.3185, -0.3379, -0.3560, -0.3730, -0.3887, -0.4034, -0.4170, -0.4297, -0.4416, -0.4527, -0.4632, -0.4731, -0.4826, -0.4916, -0.5001, -0.5083, -0.5160, -0.5233, -0.5301, -0.5364, -0.5421, -0.5472, -0.5515, -0.5551, -0.5578, -0.5597, -0.5606, -0.5605, -0.5594, -0.5571, -0.5538, -0.5493, -0.5436, -0.5367, -0.5285, -0.5191, -0.5083, -0.4961, -0.4826, -0.4676, -0.4511, -0.4331, -0.4135, -0.3923, -0.3695, -0.3449, -0.3187, -0.2906, -0.2608, -0.2293, -0.1960, -0.1611, -0.1245, -0.0865, -0.0472, -0.0068, 0.0344, 0.0761, 0.1180, 0.1595, 0.2002, 0.2396, 0.2771, 0.3122, 0.3444, 0.3732, 0.3981, 0.4191, 0.4357, 0.4482, 0.4565, 0.4611, 0.4623, 0.4606, 0.4567, 0.4512, 0.4447, 0.4380, 0.4314, 0.4255, 0.4206, 0.4169, 0.4145, 0.4135, 0.4137, 0.4151, 0.4174, 0.4205, 0.4240, 0.4279, 0.4318, 0.4357, 0.4394, 0.4426, 0.4455, 0.4478, 0.4495, 0.4507, 0.4512, 0.4512, 0.4507, 0.4496, 0.4481, 0.4461, 0.4438, 0.4411, 0.4382, 0.4350, 0.4315, 0.4278, 0.4238, 0.4195, 0.4149, 0.4098, 0.4041, 0.3978, 0.3906, 0.3823, 0.3728, 0.3618, 0.3491, 0.3343, 0.3172, 0.2976, 0.2752, 0.2497, 0.2209, 0.1888, 0.1532, 0.1142, 0.0718, 0.0265, -0.0214, -0.0714, -0.1226, -0.1743, -0.2254, -0.2748, -0.3214, -0.3642, -0.4021, -0.4343, -0.4604, -0.4798, -0.4927, -0.4992, -0.4999, -0.4952, -0.4861, -0.4732, -0.4575, -0.4397, -0.4205, -0.4005, -0.3803, -0.3602, -0.3406, -0.3216, -0.3034, -0.2860, -0.2694, -0.2535, -0.2383, -0.2236, -0.2093, -0.1954, -0.1816, -0.1679, -0.1541, -0.1403, -0.1264, -0.1124, -0.0983, -0.0842, -0.0701, -0.0563, -0.0427, -0.0295, -0.0169, -0.0050, 0.0062, 0.0167, 0.0262, 0.0350, 0.0431, 0.0505, 0.0574, 0.0640, 0.0705, 0.0770, 0.0838, 0.0911, 0.0990, 0.1076, 0.1170, 0.1272, 0.1382, 0.1500, 0.1624, 0.1753, 0.1886, 0.2021, 0.2157, 0.2291, 0.2421, 0.2546, 0.2664, 0.2772, 0.2870, 0.2954, 0.3022, 0.3073, 0.3103, 0.3110, 0.3090, 0.3039, 0.2953, 0.2825, 0.2650, 0.2418, 0.2120, 0.1744, 0.1276, 0.0697, -0.0015, 0};
const float tk[302] = {0.0000, 0.0100, 0.0200, 0.0300, 0.0400, 0.0500, 0.0600, 0.0700, 0.0800, 0.0900, 0.1000, 0.1100, 0.1200, 0.1300, 0.1400, 0.1500, 0.1600, 0.1700, 0.1800, 0.1900, 0.2000, 0.2100, 0.2200, 0.2300, 0.2400, 0.2500, 0.2600, 0.2700, 0.2800, 0.2900, 0.3000, 0.3100, 0.3200, 0.3300, 0.3400, 0.3500, 0.3600, 0.3700, 0.3800, 0.3900, 0.4000, 0.4100, 0.4200, 0.4300, 0.4400, 0.4500, 0.4600, 0.4700, 0.4800, 0.4900, 0.5000, 0.5100, 0.5200, 0.5300, 0.5400, 0.5500, 0.5600, 0.5700, 0.5800, 0.5900, 0.6000, 0.6100, 0.6200, 0.6300, 0.6400, 0.6500, 0.6600, 0.6700, 0.6800, 0.6900, 0.7000, 0.7100, 0.7200, 0.7300, 0.7400, 0.7500, 0.7600, 0.7700, 0.7800, 0.7900, 0.8000, 0.8100, 0.8200, 0.8300, 0.8400, 0.8500, 0.8600, 0.8700, 0.8800, 0.8900, 0.9000, 0.9100, 0.9200, 0.9300, 0.9400, 0.9500, 0.9600, 0.9700, 0.9800, 0.9900, 1.0000, 1.0100, 1.0200, 1.0300, 1.0400, 1.0500, 1.0600, 1.0700, 1.0800, 1.0900, 1.1000, 1.1100, 1.1200, 1.1300, 1.1400, 1.1500, 1.1600, 1.1700, 1.1800, 1.1900, 1.2000, 1.2100, 1.2200, 1.2300, 1.2400, 1.2500, 1.2600, 1.2700, 1.2800, 1.2900, 1.3000, 1.3100, 1.3200, 1.3300, 1.3400, 1.3500, 1.3600, 1.3700, 1.3800, 1.3900, 1.4000, 1.4100, 1.4200, 1.4300, 1.4400, 1.4500, 1.4600, 1.4700, 1.4800, 1.4900, 1.5000, 1.5100, 1.5200, 1.5300, 1.5400, 1.5500, 1.5600, 1.5700, 1.5800, 1.5900, 1.6000, 1.6100, 1.6200, 1.6300, 1.6400, 1.6500, 1.6600, 1.6700, 1.6800, 1.6900, 1.7000, 1.7100, 1.7200, 1.7300, 1.7400, 1.7500, 1.7600, 1.7700, 1.7800, 1.7900, 1.8000, 1.8100, 1.8200, 1.8300, 1.8400, 1.8500, 1.8600, 1.8700, 1.8800, 1.8900, 1.9000, 1.9100, 1.9200, 1.9300, 1.9400, 1.9500, 1.9600, 1.9700, 1.9800, 1.9900, 2.0000, 2.0100, 2.0200, 2.0300, 2.0400, 2.0500, 2.0600, 2.0700, 2.0800, 2.0900, 2.1000, 2.1100, 2.1200, 2.1300, 2.1400, 2.1500, 2.1600, 2.1700, 2.1800, 2.1900, 2.2000, 2.2100, 2.2200, 2.2300, 2.2400, 2.2500, 2.2600, 2.2700, 2.2800, 2.2900, 2.3000, 2.3100, 2.3200, 2.3300, 2.3400, 2.3500, 2.3600, 2.3700, 2.3800, 2.3900, 2.4000, 2.4100, 2.4200, 2.4300, 2.4400, 2.4500, 2.4600, 2.4700, 2.4800, 2.4900, 2.5000, 2.5100, 2.5200, 2.5300, 2.5400, 2.5500, 2.5600, 2.5700, 2.5800, 2.5900, 2.6000, 2.6100, 2.6200, 2.6300, 2.6400, 2.6500, 2.6600, 2.6700, 2.6800, 2.6900, 2.7000, 2.7100, 2.7200, 2.7300, 2.7400, 2.7500, 2.7600, 2.7700, 2.7800, 2.7900, 2.8000, 2.8100, 2.8200, 2.8300, 2.8400, 2.8500, 2.8600, 2.8700, 2.8800, 2.8900, 2.9000, 2.9100, 2.9200, 2.9300, 2.9400, 2.9500, 2.9600, 2.9700, 2.9800, 2.9900, 3.0000, 3.0100};
const float x1[302] PROGMEM = {0.0000, 0.0000, 0.0001, 0.0003, 0.0007, 0.0013, 0.0021, 0.0032, 0.0045, 0.0062, 0.0082, 0.0105, 0.0131, 0.0161, 0.0193, 0.0229, 0.0268, 0.0310, 0.0355, 0.0403, 0.0454, 0.0508, 0.0564, 0.0622, 0.0683, 0.0746, 0.0811, 0.0878, 0.0947, 0.1017, 0.1089, 0.1162, 0.1236, 0.1311, 0.1386, 0.1463, 0.1539, 0.1616, 0.1693, 0.1770, 0.1846, 0.1922, 0.1998, 0.2073, 0.2146, 0.2219, 0.2291, 0.2361, 0.2430, 0.2497, 0.2562, 0.2625, 0.2686, 0.2744, 0.2800, 0.2853, 0.2903, 0.2951, 0.2995, 0.3036, 0.3073, 0.3107, 0.3137, 0.3163, 0.3186, 0.3204, 0.3219, 0.3229, 0.3236, 0.3238, 0.3236, 0.3230, 0.3220, 0.3206, 0.3188, 0.3166, 0.3140, 0.3111, 0.3078, 0.3042, 0.3003, 0.2960, 0.2915, 0.2867, 0.2817, 0.2764, 0.2709, 0.2652, 0.2593, 0.2531, 0.2468, 0.2404, 0.2337, 0.2269, 0.2199, 0.2128, 0.2056, 0.1982, 0.1907, 0.1831, 0.1754, 0.1675, 0.1596, 0.1516, 0.1436, 0.1355, 0.1273, 0.1191, 0.1109, 0.1027, 0.0946, 0.0864, 0.0783, 0.0703, 0.0624, 0.0546, 0.0469, 0.0394, 0.0320, 0.0249, 0.0179, 0.0112, 0.0048, -0.0013, -0.0072, -0.0127, -0.0178, -0.0226, -0.0269, -0.0308, -0.0343, -0.0372, -0.0397, -0.0416, -0.0430, -0.0439, -0.0442, -0.0439, -0.0431, -0.0417, -0.0398, -0.0374, -0.0344, -0.0310, -0.0272, -0.0229, -0.0183, -0.0134, -0.0082, -0.0028, 0.0028, 0.0085, 0.0143, 0.0202, 0.0261, 0.0321, 0.0380, 0.0440, 0.0499, 0.0559, 0.0618, 0.0678, 0.0738, 0.0798, 0.0858, 0.0918, 0.0979, 0.1041, 0.1103, 0.1166, 0.1230, 0.1294, 0.1359, 0.1425, 0.1491, 0.1558, 0.1625, 0.1692, 0.1760, 0.1828, 0.1896, 0.1964, 0.2032, 0.2100, 0.2168, 0.2235, 0.2302, 0.2369, 0.2435, 0.2500, 0.2565, 0.2629, 0.2692, 0.2754, 0.2815, 0.2875, 0.2933, 0.2990, 0.3045, 0.3099, 0.3150, 0.3199, 0.3245, 0.3289, 0.3329, 0.3365, 0.3398, 0.3426, 0.3450, 0.3468, 0.3481, 0.3488, 0.3490, 0.3485, 0.3474, 0.3457, 0.3434, 0.3405, 0.3371, 0.3332, 0.3288, 0.3241, 0.3190, 0.3137, 0.3082, 0.3025, 0.2968, 0.2910, 0.2852, 0.2795, 0.2738, 0.2683, 0.2628, 0.2575, 0.2524, 0.2474, 0.2426, 0.2380, 0.2335, 0.2292, 0.2251, 0.2211, 0.2173, 0.2137, 0.2103, 0.2070, 0.2039, 0.2010, 0.1983, 0.1958, 0.1934, 0.1912, 0.1892, 0.1874, 0.1858, 0.1844, 0.1832, 0.1822, 0.1814, 0.1807, 0.1802, 0.1799, 0.1797, 0.1797, 0.1799, 0.1801, 0.1805, 0.1810, 0.1817, 0.1824, 0.1833, 0.1843, 0.1855, 0.1868, 0.1882, 0.1898, 0.1915, 0.1934, 0.1955, 0.1978, 0.2002, 0.2029, 0.2057, 0.2087, 0.2120, 0.2154, 0.2190, 0.2227, 0.2266, 0.2307, 0.2348, 0.2391, 0.2434, 0.2478, 0.2521, 0.2565, 0.2607, 0.2648, 0.2687, 0.2723, 0.2756,0};
const float x2[302] PROGMEM = {-3.1416, -3.1416, -3.1418, -3.1423, -3.1433, -3.1447, -3.1467, -3.1494, -3.1527, -3.1567, -3.1615, -3.1670, -3.1732, -3.1801, -3.1878, -3.1961, -3.2051, -3.2146, -3.2247, -3.2354, -3.2465, -3.2580, -3.2699, -3.2821, -3.2944, -3.3070, -3.3197, -3.3323, -3.3450, -3.3575, -3.3698, -3.3819, -3.3937, -3.4050, -3.4160, -3.4264, -3.4362, -3.4453, -3.4538, -3.4615, -3.4684, -3.4744, -3.4795, -3.4837, -3.4868, -3.4888, -3.4897, -3.4895, -3.4882, -3.4855, -3.4817, -3.4765, -3.4701, -3.4623, -3.4532, -3.4427, -3.4308, -3.4175, -3.4028, -3.3867, -3.3692, -3.3503, -3.3300, -3.3083, -3.2853, -3.2610, -3.2355, -3.2086, -3.1807, -3.1516, -3.1214, -3.0904, -3.0584, -3.0256, -2.9922, -2.9582, -2.9237, -2.8889, -2.8538, -2.8187, -2.7836, -2.7486, -2.7139, -2.6796, -2.6458, -2.6127, -2.5802, -2.5486, -2.5180, -2.4883, -2.4598, -2.4325, -2.4064, -2.3816, -2.3583, -2.3363, -2.3159, -2.2971, -2.2798, -2.2642, -2.2503, -2.2380, -2.2276, -2.2189, -2.2121, -2.2071, -2.2041, -2.2029, -2.2036, -2.2063, -2.2110, -2.2176, -2.2263, -2.2370, -2.2497, -2.2644, -2.2813, -2.3002, -2.3211, -2.3442, -2.3694, -2.3967, -2.4261, -2.4576, -2.4912, -2.5270, -2.5649, -2.6048, -2.6469, -2.6911, -2.7374, -2.7857, -2.8359, -2.8882, -2.9423, -2.9982, -3.0558, -3.1150, -3.1757, -3.2376, -3.3006, -3.3645, -3.4291, -3.4941, -3.5593, -3.6244, -3.6891, -3.7533, -3.8165, -3.8788, -3.9397, -3.9991, -4.0569, -4.1128, -4.1668, -4.2188, -4.2687, -4.3164, -4.3619, -4.4051, -4.4459, -4.4845, -4.5207, -4.5546, -4.5861, -4.6152, -4.6419, -4.6662, -4.6881, -4.7077, -4.7247, -4.7394, -4.7517, -4.7615, -4.7690, -4.7740, -4.7766, -4.7767, -4.7745, -4.7698, -4.7628, -4.7533, -4.7414, -4.7271, -4.7104, -4.6913, -4.6698, -4.6458, -4.6194, -4.5907, -4.5594, -4.5258, -4.4898, -4.4514, -4.4105, -4.3673, -4.3217, -4.2737, -4.2233, -4.1706, -4.1156, -4.0583, -3.9986, -3.9367, -3.8724, -3.8059, -3.7371, -3.6661, -3.5929, -3.5175, -3.4400, -3.3604, -3.2789, -3.1955, -3.1105, -3.0241, -2.9365, -2.8481, -2.7590, -2.6697, -2.5806, -2.4919, -2.4041, -2.3174, -2.2322, -2.1486, -2.0669, -1.9873, -1.9099, -1.8349, -1.7622, -1.6919, -1.6240, -1.5586, -1.4956, -1.4349, -1.3766, -1.3206, -1.2668, -1.2152, -1.1657, -1.1183, -1.0728, -1.0293, -0.9876, -0.9477, -0.9095, -0.8729, -0.8380, -0.8045, -0.7724, -0.7417, -0.7122, -0.6840, -0.6569, -0.6310, -0.6060, -0.5821, -0.5591, -0.5370, -0.5158, -0.4955, -0.4759, -0.4571, -0.4391, -0.4217, -0.4051, -0.3892, -0.3739, -0.3592, -0.3450, -0.3314, -0.3183, -0.3056, -0.2933, -0.2813, -0.2696, -0.2581, -0.2469, -0.2358, -0.2248, -0.2139, -0.2031, -0.1922, -0.1814, -0.1706, -0.1597, -0.1489, -0.1380, -0.1271, -0.1162, -0.1053, -0.0946, -0.0840, -0.0735, -0.0633, -0.0535, -0.0442, -0.0355, -0.0276, -0.0207,0};
const float x3[302] PROGMEM = {0.0000, 0.0032, 0.0129, 0.0277, 0.0468, 0.0694, 0.0947, 0.1222, 0.1513, 0.1818, 0.2131, 0.2451, 0.2773, 0.3097, 0.3418, 0.3736, 0.4049, 0.4355, 0.4653, 0.4941, 0.5218, 0.5484, 0.5737, 0.5977, 0.6202, 0.6412, 0.6608, 0.6787, 0.6951, 0.7098, 0.7230, 0.7344, 0.7442, 0.7524, 0.7589, 0.7638, 0.7670, 0.7687, 0.7686, 0.7670, 0.7637, 0.7588, 0.7522, 0.7441, 0.7343, 0.7229, 0.7098, 0.6951, 0.6787, 0.6607, 0.6410, 0.6197, 0.5967, 0.5722, 0.5460, 0.5182, 0.4889, 0.4581, 0.4259, 0.3922, 0.3573, 0.3211, 0.2837, 0.2454, 0.2062, 0.1662, 0.1256, 0.0845, 0.0432, 0.0019, -0.0394, -0.0804, -0.1209, -0.1607, -0.1997, -0.2376, -0.2744, -0.3098, -0.3438, -0.3764, -0.4074, -0.4368, -0.4647, -0.4910, -0.5159, -0.5394, -0.5616, -0.5825, -0.6024, -0.6213, -0.6392, -0.6563, -0.6727, -0.6883, -0.7032, -0.7175, -0.7310, -0.7439, -0.7560, -0.7672, -0.7776, -0.7871, -0.7955, -0.8028, -0.8089, -0.8138, -0.8172, -0.8193, -0.8198, -0.8187, -0.8160, -0.8115, -0.8053, -0.7972, -0.7871, -0.7751, -0.7610, -0.7448, -0.7265, -0.7059, -0.6831, -0.6579, -0.6304, -0.6004, -0.5680, -0.5331, -0.4957, -0.4559, -0.4136, -0.3689, -0.3219, -0.2727, -0.2216, -0.1687, -0.1144, -0.0590, -0.0030, 0.0532, 0.1092, 0.1642, 0.2177, 0.2691, 0.3178, 0.3634, 0.4052, 0.4430, 0.4764, 0.5054, 0.5297, 0.5497, 0.5655, 0.5774, 0.5858, 0.5914, 0.5947, 0.5961, 0.5964, 0.5960, 0.5953, 0.5949, 0.5949, 0.5957, 0.5974, 0.6001, 0.6037, 0.6083, 0.6136, 0.6196, 0.6260, 0.6327, 0.6395, 0.6462, 0.6527, 0.6588, 0.6643, 0.6692, 0.6734, 0.6767, 0.6792, 0.6808, 0.6816, 0.6814, 0.6804, 0.6785, 0.6758, 0.6723, 0.6680, 0.6630, 0.6572, 0.6506, 0.6432, 0.6349, 0.6257, 0.6155, 0.6042, 0.5916, 0.5775, 0.5617, 0.5441, 0.5244, 0.5023, 0.4775, 0.4498, 0.4189, 0.3847, 0.3468, 0.3052, 0.2599, 0.2109, 0.1584, 0.1028, 0.0445, -0.0158, -0.0772, -0.1388, -0.1996, -0.2585, -0.3144, -0.3662, -0.4133, -0.4548, -0.4904, -0.5198, -0.5430, -0.5602, -0.5718, -0.5781, -0.5797, -0.5772, -0.5711, -0.5620, -0.5506, -0.5372, -0.5225, -0.5066, -0.4901, -0.4731, -0.4558, -0.4385, -0.4212, -0.4039, -0.3867, -0.3696, -0.3525, -0.3353, -0.3179, -0.3004, -0.2826, -0.2646, -0.2462, -0.2275, -0.2085, -0.1892, -0.1698, -0.1504, -0.1310, -0.1119, -0.0931, -0.0748, -0.0572, -0.0402, -0.0241, -0.0087, 0.0058, 0.0196, 0.0328, 0.0455, 0.0578, 0.0700, 0.0822, 0.0947, 0.1076, 0.1210, 0.1351, 0.1500, 0.1656, 0.1821, 0.1994, 0.2173, 0.2358, 0.2548, 0.2740, 0.2932, 0.3124, 0.3311, 0.3493, 0.3666, 0.3827, 0.3975, 0.4105, 0.4215, 0.4300, 0.4357, 0.4381, 0.4367, 0.4308, 0.4196, 0.4024, 0.3781, 0.3453, 0.3026,0};
const float x4[302] PROGMEM = {0.0000, -0.0080, -0.0316, -0.0680, -0.1148, -0.1697, -0.2310, -0.2971, -0.3666, -0.4384, -0.5113, -0.5844, -0.6569, -0.7279, -0.7968, -0.8628, -0.9255, -0.9841, -1.0384, -1.0877, -1.1316, -1.1700, -1.2023, -1.2283, -1.2479, -1.2608, -1.2669, -1.2661, -1.2583, -1.2436, -1.2219, -1.1933, -1.1579, -1.1158, -1.0672, -1.0121, -0.9508, -0.8834, -0.8101, -0.7312, -0.6468, -0.5572, -0.4625, -0.3631, -0.2591, -0.1507, -0.0382, 0.0782, 0.1983, 0.3217, 0.4483, 0.5777, 0.7097, 0.8441, 0.9804, 1.1183, 1.2575, 1.3977, 1.5383, 1.6789, 1.8191, 1.9583, 2.0959, 2.2314, 2.3642, 2.4934, 2.6184, 2.7385, 2.8528, 2.9605, 3.0609, 3.1531, 3.2363, 3.3098, 3.3729, 3.4250, 3.4655, 3.4941, 3.5104, 3.5142, 3.5055, 3.4843, 3.4510, 3.4056, 3.3487, 3.2808, 3.2023, 3.1138, 3.0160, 2.9094, 2.7947, 2.6723, 2.5429, 2.4070, 2.2650, 2.1174, 1.9645, 1.8067, 1.6444, 1.4778, 1.3073, 1.1331, 0.9554, 0.7745, 0.5906, 0.4039, 0.2146, 0.0228, -0.1711, -0.3672, -0.5651, -0.7648, -0.9662, -1.1691, -1.3733, -1.5788, -1.7855, -1.9933, -2.2020, -2.4116, -2.6219, -2.8329, -3.0444, -3.2562, -3.4682, -3.6802, -3.8917, -4.1025, -4.3121, -4.5199, -4.7252, -4.9270, -5.1244, -5.3160, -5.5003, -5.6757, -5.8403, -5.9921, -6.1287, -6.2481, -6.3481, -6.4265, -6.4817, -6.5122, -6.5170, -6.4957, -6.4484, -6.3758, -6.2790, -6.1598, -6.0201, -5.8621, -5.6883, -5.5010, -5.3025, -5.0947, -4.8796, -4.6588, -4.4334, -4.2046, -3.9731, -3.7396, -3.5043, -3.2678, -3.0301, -2.7914, -2.5520, -2.3119, -2.0712, -1.8301, -1.5886, -1.3470, -1.1052, -0.8634, -0.6216, -0.3799, -0.1384, 0.1030, 0.3443, 0.5855, 0.8267, 1.0678, 1.3089, 1.5501, 1.7915, 2.0329, 2.2745, 2.5162, 2.7580, 2.9997, 3.2413, 3.4827, 3.7236, 3.9639, 4.2036, 4.4423, 4.6800, 4.9165, 5.1517, 5.3856, 5.6182, 5.8496, 6.0797, 6.3086, 6.5362, 6.7626, 6.9873, 7.2100, 7.4295, 7.6447, 7.8537, 8.0540, 8.2427, 8.4162, 8.5706, 8.7018, 8.8061, 8.8798, 8.9202, 8.9256, 8.8953, 8.8301, 8.7315, 8.6023, 8.4458, 8.2659, 8.0664, 7.8515, 7.6249, 7.3899, 7.1498, 6.9069, 6.6636, 6.4215, 6.1821, 5.9463, 5.7151, 5.4889, 5.2684, 5.0538, 4.8455, 4.6435, 4.4482, 4.2596, 4.0780, 3.9034, 3.7359, 3.5756, 3.4226, 3.2768, 3.1380, 3.0063, 2.8812, 2.7627, 2.6502, 2.5433, 2.4418, 2.3449, 2.2524, 2.1637, 2.0785, 1.9963, 1.9171, 1.8405, 1.7665, 1.6953, 1.6269, 1.5615, 1.4995, 1.4411, 1.3866, 1.3364, 1.2907, 1.2497, 1.2134, 1.1820, 1.1554, 1.1334, 1.1159, 1.1024, 1.0927, 1.0862, 1.0827, 1.0814, 1.0819, 1.0836, 1.0859, 1.0881, 1.0895, 1.0894, 1.0869, 1.0811, 1.0710, 1.0554, 1.0329, 1.0019, 0.9605, 0.9064, 0.8369, 0.7487, 0.6379,0};

void setup() {
  Serial.begin(115200);

  //Motor
  motor.begin();

  // Threads
  uState.onRun(updateState);
  uState.setInterval(10);
  applyControl.onRun(controller);
  applyControl.setInterval(20);
  threads.add(&uState);
  threads.add(&applyControl);
  
  // Limit Switch PinsSetip
  pinMode(limLPin,INPUT_PULLUP);
  pinMode(limRPin,INPUT_PULLUP);

  // Encoder Pin Setup
  pinMode(w1, INPUT_PULLUP);
  pinMode(g1, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(g1), encoder1PinChange, CHANGE);
  pinMode(w2, INPUT_PULLUP);
  pinMode(g2, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(g2), encoder2PinChange, CHANGE);
  
  getDownAngle();
  centerGantry();

  initializeState();
}

void loop() {

  if(digitalRead(limRPin) == 0 || digitalRead(limLPin) == 0){
    motor.stop();
  }
  else{
    threads.run();
  }
  
}

void getDownAngle(){

    float minAngle = getPendAng();
    float maxAngle = getPendAng();

    float sTime = micros();
    float ang;

    while(micros() <= sTime + 5000000){
      ang = getPendAng();
      if(minAngle>ang){
        minAngle = ang;
      }
      if(maxAngle<ang){
        maxAngle = ang;
      }
    }

    pendulumDownAngle = (maxAngle+minAngle)/2;
    pendulumUpAngle = pendulumDownAngle + 3.14159;
}

void centerGantry(){

  while(digitalRead(limRPin) == 1){
    motor.rotate(15,CW);
  }
  motor.stop();
  float rightPos = getPos();

  while(digitalRead(limLPin) == 1){
    motor.rotate(15,CCW);
  }
  motor.stop();
  float leftPos = getPos();

  centerPos = (rightPos+leftPos)/2+.2;

  float sTime = micros();
  float integral = 0;
  float oldTime = micros();
  float newTime = micros();
  float uCom;
  
  while(newTime-sTime<=3000000 and digitalRead(limRPin) == 1){
    oldTime = newTime;
    newTime = micros();
    integral = integral + (getPos()-centerPos)*(newTime-oldTime)/(1000000);
    uCom = (1.25*(getPos()-centerPos)+.25*integral)*100;
    if(uCom >= 0){
      motor.rotate(uCom,CW);
    }
    else{
      motor.rotate(-uCom,CCW);
    }
  }
  motor.stop();
}

float getPendAng(){
  float angle;
  angle = -counter1/1200.0*2*3.14159;
  return angle;
}

float getPos(){
  float pos;
  pos = counter2/1200.0*2*3.14159*r;
  return pos;
}

void initializeState(){
  
  x[0] = centerPos-getPos();
  x[1] = getPendAng() - pendulumUpAngle;
  x[2] = 0;
  x[3] = 0;
  startTime = micros();
  lastPosUpdate = startTime;
  lastAngUpdate = startTime;
  
}

//void updatePos(){
//  float newPos = centerPos-getPos();
//  float nextTime = micros();
//  
//  x[2]= (newPos-x[0])*1000000/(nextTime - lastPosUpdate);
//  x[0] = newPos;
//
//  lastPosUpdate = nextTime;
//}

//void updateAng(){
//  float newAng = getPendAng() - pendulumUpAngle;
//  float nextTime = micros();
//  
//  x[3]= (newAng-x[1])*1000000/(nextTime - lastAngUpdate);
//  x[1] = newAng;
//
//  lastAngUpdate = nextTime;
//}

void updateState(){
  float newPos = centerPos-getPos();
  float newAng = getPendAng() - pendulumUpAngle;

  float nextTime = (micros()-startTime)/1000000;

  x[2] = (newPos-x[0])/(nextTime-x[4]);
  x[3] = (newAng - x[1])/(nextTime-x[4]);
  x[0] = newPos;
  x[1] = newAng;
  x[4] = nextTime;

}

void controller(){
  n = closest(tk,(micros()-startTime)/1000000,n);
  float uCom = uk[n]
  + pgm_read_float(&K1[n])*(x[0]-pgm_read_float(&x1[n])) + pgm_read_float(&K2[n])*(x[1]-pgm_read_float(&x2[n])) + pgm_read_float(&K3[n])*(x[2]-pgm_read_float(&x3[n])) + pgm_read_float(&K4[n])*(x[3]-pgm_read_float(&x4[n]));
  
//  Serial.print(pgm_read_float(&K1[n]));
//  Serial.print(" ");
//  Serial.print((x[0]-pgm_read_float(&x1[n])));
//  Serial.print(" | ");
//  Serial.print(pgm_read_float(&K2[n]));
//  Serial.print(" ");
//  Serial.print((x[1]-pgm_read_float(&x2[n])));
//  Serial.print(" | ");
//  Serial.print(pgm_read_float(&K3[n]));
//  Serial.print(" ");
//  Serial.print(x[2]-pgm_read_float(&x3[n]));
//  Serial.print(" | ");
//  Serial.print(pgm_read_float(&K4[n]));
//  Serial.print(" ");
//  Serial.print(x[3]-pgm_read_float(&x4[n]));
//  Serial.print(" | ");
//  Serial.print(uCom);
//  Serial.print(" ");
//  Serial.println(n);
  
  
  if(uCom>=0){
    motor.rotate(min(uCom*100,100),CW);
  }
  else{
    motor.rotate(min(-uCom*100,100),CCW);
  }

  Serial.print("Input Command: ");
  Serial.print(uCom);
  Serial.print("Time: ");
  Serial.print((micros()-startTime)/1000000);
  Serial.print(" Current Position: ");
  Serial.print(x[0]);
  Serial.print(" Current Angle: ");
  Serial.print(x[1]);
  Serial.print(" Current Position Rate: ");
  Serial.print(x[2]);
  Serial.print(" Current Angle Rate: ");
  Serial.println(x[3]);
  
}

void encoder1PinChange() {
counter1 += digitalRead(g1) == digitalRead(w1) ? -1 : 1;
}

void encoder2PinChange() {
counter2 += digitalRead(g2) != digitalRead(w2) ? -1 : 1;
}

int closest(const float arr[],float val,int startIndex){

  //float dif = abs(pgm_read_float(&arr[0])-val);
  float dif = abs(arr[startIndex]-val);
  float minVal = dif;
  int index = startIndex;
  bool lastMin = true;
  for(int i = startIndex+1; i<=301; i++){
    dif = abs(arr[i]-val);
    if(dif<minVal){
      minVal = dif;
      index = i;
    }
    else{
      break;
    }
  }
  return index;
}
